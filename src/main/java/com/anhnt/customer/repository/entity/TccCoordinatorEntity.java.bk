package com.anhnt.customer.repository.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.AttributeConverter;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Converter;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Version;

import org.apache.commons.lang3.StringUtils;

import java.io.IOException;
import java.util.List;

import com.anhnt.common.domain.constant.TccFunction;
import com.anhnt.common.domain.constant.TccStatus;
import com.anhnt.common.domain.exception.AbstractException;
import com.anhnt.common.domain.response.ErrorFactory;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Entity
@Table(name="tcc_coordinator")
@Access(AccessType.FIELD)
@Getter
@Setter
@NoArgsConstructor
public class TccCoordinatorEntity {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  
  @Enumerated(EnumType.ORDINAL)
  private TccFunction tccFunction;
  
  @Column(name = "params", columnDefinition = "json")
  @Convert(converter = StateMapConverter.class)
  private List<StateMap> stateMap;

  @Enumerated(EnumType.ORDINAL)
  private TccStatus status;

  @Version
  private Long version;
}

@Converter(autoApply = true)
class StateMapConverter implements AttributeConverter<List<StateMap>, String> {

  private final static ObjectMapper objectMapper = new ObjectMapper();

  @Override
  public String convertToDatabaseColumn(List<StateMap> attribute) {
      try {
        return objectMapper.writeValueAsString(attribute);
      } catch (JsonProcessingException ex) {
        ex.printStackTrace();
        throw new AbstractException(ErrorFactory.CustomerError.INTERNAL_SERVER_ERROR.apply(null));
      }

  }

  @Override
  public List<StateMap> convertToEntityAttribute(String dbData) {
    try {
      if (StringUtils.isEmpty(dbData)) dbData = "[]";
      return objectMapper.readValue(dbData, List.class);
    } catch (IOException ex) {
      ex.printStackTrace();
      throw new AbstractException(ErrorFactory.CustomerError.INTERNAL_SERVER_ERROR.apply(null));
    }
  }  
}